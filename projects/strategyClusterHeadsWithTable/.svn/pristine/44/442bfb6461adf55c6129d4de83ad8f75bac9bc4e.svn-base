package vppClusterHeads.bioGas;

import helper.Swmcsv;

import java.util.LinkedList;

import vppClusterHeads.genericStuff.GenericAnswerContent;
import vppClusterHeads.genericStuff.GenericRequestContent;
import vppClusterHeads.genericStuff.VPPPlantType;
import akka.advancedMessages.ErrorAnswerContent;
import akka.basicMessages.AnswerContent;
import akka.basicMessages.RequestContent;
import akka.systemActors.GlobalTime;
import behavior.BehaviorModel;

/**
 * 
 * This is a specific behavior
 * 
 * @author bytschkow
 *
 */

public class BioGasBehaviorModel extends BehaviorModel {

	final VPPPlantType type = VPPPlantType.BIOGAS;
	public double installedPower;

	// Answer Content
    public double actualPower;
    public double forecastPower;    
    public GenericAnswerContent answerContentToSend = new GenericAnswerContent();
    
	public double flexibilityfactor;
	
    
    /*
     * Constructor
     */    
    public BioGasBehaviorModel(double installedPower) {
        this.installedPower = installedPower;
        
        // die Antworten die sich nicht Ã¤ndern
        answerContentToSend.plantType = type;
		answerContentToSend.installedPower = this.installedPower;
    }
	
	@Override
	public void handleRequest() {
		flexibilityfactor = ((GenericRequestContent) requestContentReceived).flexibilityRequestFactor;
	}

	public void makeDecision() {		
		
		actualPower = installedPower*Swmcsv.getSWMProfileBioGas(GlobalTime.currentTime);
		forecastPower = installedPower*Swmcsv.getSWMProfileBioGas(GlobalTime.nextTime);
		
		answerContentToSend.scheduledProduction = actualPower;
		answerContentToSend.forecastPower = forecastPower;
		
		double negativeFlexibility;		
		if (actualPower > 0.3 * installedPower) {
			negativeFlexibility = actualPower - 0.3 * installedPower;
		} else negativeFlexibility = 0;
		
		double positiveFlexibility = installedPower - actualPower;
		if (positiveFlexibility < 0) positiveFlexibility = 0;
		
		if (flexibilityfactor < 0){
			actualPower = actualPower + flexibilityfactor*negativeFlexibility;
		}
		
		if (flexibilityfactor > 0){
			actualPower = actualPower + flexibilityfactor*positiveFlexibility;
		}
		
		answerContentToSend.negativeFlexibility = negativeFlexibility;
		answerContentToSend.positiveFlexibility = positiveFlexibility;			
		answerContentToSend.currentPower = actualPower;		
	}

	public AnswerContent returnAnswerContentToSend() {
		//System.out.println(answerContentToSend);
		return answerContentToSend;
	}

	public RequestContent returnRequestContentToSend() {
		return null;
	}

	@Override
	public void handleError(LinkedList<ErrorAnswerContent> errors) {}
}