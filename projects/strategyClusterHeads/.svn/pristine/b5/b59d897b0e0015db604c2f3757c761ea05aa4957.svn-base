package vppClusterHeads.water;

import java.util.LinkedList;

import helper.Swmcsv;
import vppClusterHeads.genericStuff.GenericAnswerContent;
import vppClusterHeads.genericStuff.VPPPlantType;
import akka.advancedMessages.ErrorAnswerContent;
import akka.basicMessages.AnswerContent;
import akka.basicMessages.RequestContent;
import akka.systemActors.GlobalTime;
import behavior.BehaviorModel;

/**
 * 
 * This is a specific behavior
 * 
 * @author bytschkow
 *
 */

public class WaterBehaviorModel extends BehaviorModel {

	final VPPPlantType type = VPPPlantType.WATER;
	public double installedPower;

	// Answer Content
    public double actualPower;
    public double forecastPower;    
    public GenericAnswerContent answerContentToSend = new GenericAnswerContent();
    
    /*
     * Constructor - use the ActorFactory to create an Actor with 
     * corresponding BehaviorModel
     */    
    public WaterBehaviorModel(double installedPower) {
        if (installedPower < 0.0) throw new IllegalArgumentException("WaterPowerPlantBehaviorModel.installedPower has to be > 0.0: " + installedPower);
        this.installedPower = installedPower;
        
		answerContentToSend.plantType = type;
		answerContentToSend.installedPower = this.installedPower;
    }
	
	@Override
	public void handleRequest() {
	}

	@Override
	public void makeDecision() {		
		actualPower = installedPower*Swmcsv.getSWMProfileWater(GlobalTime.currentTime);
		forecastPower = installedPower*Swmcsv.getSWMProfileWater(GlobalTime.nextTime);		
		
    	answerContentToSend.currentPower = actualPower;
    	answerContentToSend.scheduledProduction = actualPower;
    	answerContentToSend.forecastPower = forecastPower;

	}

	@Override
	public AnswerContent returnAnswerContentToSend() {
		return answerContentToSend;
	}

	@Override
	public RequestContent returnRequestContentToSend() {
		return null;
	}

	@Override
	public void handleError(LinkedList<ErrorAnswerContent> errors) {}

}
